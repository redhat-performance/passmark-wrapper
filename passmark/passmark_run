#!/bin/bash
#
#                         License
#
# Copyright (C) 2021  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# This script automates the execution of coremark.  It will determine the
# set of default run parameters based on the system configuration.
#
test_name="passmark"
passmark_version="v1.0"
curdir=`pwd`
if [ ! -f "/tmp/${test_name}.out" ]; then
        command="${0} $@"
        echo $command
        $command &> /tmp/${test_name}.out
	rtc=$?
	if [[ -f /tmp/${test_name}.out ]]; then
        	cat /tmp/${test_name}.out
        	rm /tmp/${test_name}.out
	fi
        exit $rtc
fi

arguments="$@"

curdir=`pwd`

if [[ $0 == "./"* ]]; then
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	if [[ $chars == 1 ]]; then
		run_dir=`pwd`
	else
		run_dir=`echo $0 | cut -d'/' -f 1-${chars} | cut -d'.' -f2-`
		run_dir="${curdir}${run_dir}"
	fi
elif [[ $0 != "/"* ]]; then
	dir=`echo $0 | rev | cut -d'/' -f2- | rev`
	run_dir="${curdir}/${dir}"
else
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	run_dir=`echo $0 | cut -d'/' -f 1-${chars}`
	if [[ $run_dir != "/"* ]]; then
		run_dir=${curdir}/${run_dir}
	fi
fi

cd $run_dir
arch=`uname -m`

show_usage=0

# Gather hardware information
$curdir/test_tools/gather_data ${curdir}

exit_out()
{
	echo $1
	exit $2
}
#
# Reduce data
#

summary_file="passmark.summary"
rm $summary_file
pull_data()
{
	passmark_file=`mktemp /tmp/passmark_data.XXXXX`
	test_name=${1}
	grep "^${test_name}" results_all_*yml | cut -d':' -f2 | sed "s/ //g" > ${passmark_file}
	results=0.0
	iterations=0
	while IFS= read -r line
	do
		let "iterations=$iterations+1"
		value=`echo $line | awk '{print $4}'`
		results=`echo "${results}}+${value}"| bc -l`
	done < "${passmark_file}"
	rm ${passmark_file}
	value=`echo "scaling=12;${results}/${iterations}" | bc -l`
	output=`printf "  %s:%-40.12f" $test_name $value | sed "s/ //g" | sed "s/:/: /g"`
	echo "${output}"
}

usage()
{
	echo "$1 Usage:"
	echo "  --cpu_add n: add n cpus each iteration until hit max cpus"
	echo "  --powers_2: starting from 1 cpu, keep doubling the cpus until max cpus"
	source ${curdir}/test_tools/general_setup --usage
	exit 1
}

produce_report()
{
	found=0

	if [[ ! -f  results_all_1.yml ]]; then
		echo Failed > test_results_report
	else
		while IFS= read -r line
		do
			if [[ $found -eq 1 ]]; then
				if [[ ${line} != "SystemInformation:"* ]]; then
					test_name=`echo $line | awk '{print $1}'`
					pull_data $test_name
					continue
				else
					found=0
				fi
			fi
			if [[ $line == "NumTestProcesses:"* ]]; then
				found=1
			fi
			echo "${line}" >> $summary_file
		done < "results_all_1.yml"
		echo Ran > test_results_report

		located=0
		[ -f results.csv ] && rm results.csv

		$TOOLS_BIN/test_header_info --front_matter --results_file results.csv --host $to_configuration --sys_type $to_sys_type --tuned $to_tuned_setting --results_version $passmark_version --test_name $test_name

		while IFS= read -r line
		arch=`uname -m`
		do
			if [[ $line == *"Results Complete:"* ]]; then
				located=1
				continue
			fi
			if [ $located -eq 0 ]; then
				continue
			fi
			if [[ $line == *"SystemInformation:"* ]]; then
				break;
			fi

			if [[ $arch == "aarch64" ]] && [[ $line == *"CPU_avx"* ]]; then
				#
				# Filter tests that do not run on ARM.
				#
				continue
			fi
			echo $line | sed "s/ //g" >> results.csv
		done < "$summary_file"
	fi
	echo Checksum: Not applicable for summary file >> $summary_file
}

install_tools()
{
	pushd $curdir > /dev/null
	#
	# Clone the repo that contains the common code and tools
	#
	tools_git=https://github.com/redhat-performance/test_tools-wrappers

	found=0
	for arg in "$@"; do
		if [ $found -eq 1 ]; then
			tools_git=$arg
			found=0
		fi
		if [[ $arg == "--tools_git" ]]; then
			found=1
		fi
	
		#
		# We do the usage check here, as we do not want to be calling
		# the common parsers then checking for usage here.  Doing so will
		# result in the script exiting with out giving the test options.
		#
		if [[ $arg == "--usage" ]]; then
			show_usage=1
		fi
	done
	
	#
	# Check to see if the test tools directory exists.  If it does, we do not need to
	# clone the repo.
	#
	if [ ! -d "test_tools" ]; then
		git clone $tools_git test_tools
		if [ $? -ne 0 ]; then
			exit_out "pulling git $tools_git failed." 1
		fi
	fi

	if [ $show_usage -eq 1 ]; then
		usage $1
	fi
	popd > /dev/null
}

run_passmark()
{
	pushd $curdir > /dev/null
	if [ ! -d "PerformanceTest" ]; then
		if [[ $arch == "aarch64" ]]; then
			unzip uploads/pt_linux_arm64.zip
			if [ $? -ne 0 ]; then
				exit_out "pt_linux_arm64.zip failed" 1
			fi
			#
			# Ubuntu check
			#
			uname -a | grep  -q Ubuntu
			if [ $? -eq 0 ]; then
				echo ubuntu >> /tmp/dave
				if [[ ! -f /usr/lib64 ]]; then
					ln -s /usr/lib /usr/lib64
					echo ln -s /usr/lib /usr/lib64 >> /tmp/dave
				fi
			fi
		else
			unzip uploads/pt_linux_x64.zip
			if [ $? -ne 0 ]; then
				exit_out "pt_linux_x64.zip failed" 1
			fi
		fi
	fi

	if [ ! -f "/usr/lib64/libncurses.so.5" ]; then
		pushd /usr/lib64 > /dev/null
		ln -s libncurses.so.6 libncurses.so.5
		popd > /dev/null
	fi

	pushd PerformanceTest > /dev/null

	#
	# Iteration of test.
	#

	rm ${test_name}_*out
	rm passmark.summary

	if [[ $to_use_pcp -eq 1 ]]; then
		source $TOOLS_BIN/pcp/pcp_commands.inc
		setup_pcp
		pcp_cfg=$TOOLS_BIN/pcp/default.cfg
		pcp_dir=/tmp/pcp_passmark_$(date +%Y.%m.%d-%H.%M.%S)
		start_pcp $pcp_dir passmark $pcp_cfg
		start_pcp_subset
	fi
	
	for iter in $(seq 1 1 $to_times_to_run); do		
		if [[ $arch == "aarch64" ]]; then
			./pt_linux_arm64 -r 3 >> ${test_name}_${iter}.out
			if [ $? -ne 0 ]; then
				exit_out "Execution of ./pt_linux_arm64 failed" 1
			fi
		else
			./pt_linux_x64 -r 3 >> ${test_name}_${iter}.out
			if [ $? -ne 0 ]; then
				exit_out "Execution of ./pt_linux_x64 failed" 1
			fi
		fi
		mv results_all.yml results_all_${iter}.yml		
		if [[ $to_use_pcp -eq 1 ]]; then
			result2pcp iteration $iter
			stop_pcp_subset
		fi
	done

	produce_report

	${curdir}/test_tools/save_results --curdir $curdir --home_root $to_home_root --results results.csv --test_name $test_name --tuned_setting=$to_tuned_setting --version NONE --user $to_user  --other_files "passmark.summary,results_all_*,${test_name}_${iter}.out,test_results_report,$pcp_dir"
	popd > /dev/null
}

install_tools "$@"

#
# Variables set by general setup.
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#

source ${curdir}/test_tools/general_setup "$@"

ARGUMENT_LIST=(
	"cpu_add"
)

NO_ARGUMENTS=(
	"powers_2"
 	"usage"
)

# read arguments
opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
	--name "$(basename "$0")" \
	--options "h" \
	-- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

#
# As the passmark kit is old, it needs older libcurses libraries
# to run on Ubuntu.
#
os=`$TOOLS_BIN/detect_os`
if [[ $os == "ubuntu" ]]; then
	add-apt-repository universe -y
	apt-get install libncurses5 -y
fi

run_passmark
exit 0
